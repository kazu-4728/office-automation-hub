---
name: 🎨 Slide Generation Engine

"on":
  workflow_call:
    inputs:
      task-id:
        required: true
        type: string
      data-source:
        required: false
        type: string
        default: 'manual'
      template-type:
        required: false
        type: string
        default: 'professional'
      slide-count:
        required: false
        type: string
        default: '10'
      language:
        required: false
        type: string
        default: 'ja'
      theme:
        required: false
        type: string
        default: 'modern'
permissions:
  contents: write
  pull-requests: write
concurrency:
  group: slide-gen-${{ inputs.task-id }}
  cancel-in-progress: false

jobs:
  slide-generation-engine:
    name: 🎨 Slide Generation Engine
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      status: ${{ steps.slide-generation.outputs.status }}
      output-file: ${{ steps.slide-generation.outputs.output_file }}
      slide-summary: ${{ steps.slide-generation.outputs.slide_summary }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🛠️ Install Slide Generation Dependencies
        run: |
          pip install --upgrade pip
          pip install python-pptx jinja2 pillow
          pip install matplotlib seaborn plotly pandas numpy
          pip install requests beautifulsoup4 markdown
          pip install reportlab weasyprint
          pip install openai anthropic  # For AI-powered content generation

      - name: 📁 Create Output Directories
        run: |
          mkdir -p outputs/slides/${{ inputs.task-id }}
          mkdir -p outputs/slides/${{ inputs.task-id }}/images
          mkdir -p outputs/slides/${{ inputs.task-id }}/charts
          mkdir -p templates/slides

      - name: 🎨 Execute Slide Generation
        id: slide-generation
        run: |
          python3 .github/scripts/slide_generator.py \
            --task-id "${{ inputs.task-id }}" \
            --template-type "${{ inputs.template-type }}" \
            --theme "${{ inputs.theme }}" \
            --language "${{ inputs.language }}" \
            --data-source "${{ inputs.data-source }}" \
            --slide-count "${{ inputs.slide-count }}"

      - name: 📊 Generate Slide Report
        run: |
          echo "## 🎨 Slide Generation Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Task ID**: ${{ inputs.task-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Source**: ${{ inputs.data-source }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Template**: ${{ inputs.template-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Theme**: ${{ inputs.theme }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Language**: ${{ inputs.language }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.slide-generation.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "outputs/slides/${{ inputs.task-id }}/summary.json" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Generation Results:" >> $GITHUB_STEP_SUMMARY
            cat outputs/slides/${{ inputs.task-id }}/summary.json | jq -r '
              "- **Slide Count**: " + (.slide_count | tostring) + "\n" +
              "- **Data Sources**: " + (.data_sources | tostring) + "\n" +
              "- **Text Length**: " + (.total_text_length | tostring) + " characters\n" +
              "- **Generation Time**: " + .generation_time
            ' >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload Slide Generation Results
        uses: actions/upload-artifact@v4
        if: steps.slide-generation.outputs.status == 'success'
        with:
          name: slide-generation-results-${{ inputs.task-id }}
          path: outputs/slides/${{ inputs.task-id }}/
          retention-days: 30
