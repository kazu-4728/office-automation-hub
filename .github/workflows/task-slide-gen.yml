name: 🎨 Slide Generation Engine

on:
  workflow_call:
    inputs:
      task-id:
        required: true
        type: string
      data-source:
        required: false
        type: string
        default: 'manual'
      template-type:
        required: false
        type: string
        default: 'professional'
      slide-count:
        required: false
        type: string
        default: '10'
      language:
        required: false
        type: string
        default: 'ja'
      theme:
        required: false
        type: string
        default: 'modern'
permissions:
  contents: write
  pull-requests: write
concurrency:
  group: slide-gen-${{ inputs.task-id }}
  cancel-in-progress: false

jobs:
  slide-generation-engine:
    name: 🎨 Slide Generation Engine
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      status: ${{ steps.slide-generation.outputs.status }}
      output-file: ${{ steps.slide-generation.outputs.output_file }}
      slide-summary: ${{ steps.slide-generation.outputs.slide_summary }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 🛠️ Install Slide Generation Dependencies
      run: |
        pip install --upgrade pip
        pip install python-pptx jinja2 pillow
        pip install matplotlib seaborn plotly pandas numpy
        pip install requests beautifulsoup4 markdown
        pip install reportlab weasyprint
        pip install openai anthropic  # For AI-powered content generation

    - name: 📁 Create Output Directories
      run: |
        mkdir -p outputs/slides/${{ inputs.task-id }}
        mkdir -p outputs/slides/${{ inputs.task-id }}/images
        mkdir -p outputs/slides/${{ inputs.task-id }}/charts
        mkdir -p templates/slides

    - name: 🎨 Execute Slide Generation
      id: slide-generation
      run: |
        cat > slide_generator.py << 'EOF'
        import os
        import json
        import sys
        from datetime import datetime
        from pptx import Presentation
        from pptx.util import Inches, Pt
        from pptx.dml.color import RGBColor
        from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
        from pptx.enum.shapes import MSO_SHAPE
        import matplotlib.pyplot as plt
        import seaborn as sns
        import pandas as pd
        import numpy as np
        from PIL import Image
        import re
        import textwrap
        
        class SlideGenerator:
            def __init__(self, task_id, template_type='professional', theme='modern', language='ja'):
                self.task_id = task_id
                self.template_type = template_type
                self.theme = theme
                self.language = language
                self.output_dir = f"outputs/slides/{task_id}"
                
                # Theme colors
                self.themes = {
                    'modern': {
                        'primary': RGBColor(41, 128, 185),      # Blue
                        'secondary': RGBColor(52, 73, 94),      # Dark Blue
                        'accent': RGBColor(231, 76, 60),        # Red
                        'background': RGBColor(255, 255, 255),  # White
                        'text': RGBColor(44, 62, 80)            # Dark Gray
                    },
                    'corporate': {
                        'primary': RGBColor(34, 49, 63),        # Navy
                        'secondary': RGBColor(93, 109, 126),    # Gray
                        'accent': RGBColor(255, 193, 7),        # Gold
                        'background': RGBColor(248, 249, 250),  # Light Gray
                        'text': RGBColor(33, 37, 41)            # Black
                    },
                    'creative': {
                        'primary': RGBColor(155, 89, 182),      # Purple
                        'secondary': RGBColor(52, 152, 219),    # Blue
                        'accent': RGBColor(46, 204, 113),       # Green
                        'background': RGBColor(255, 255, 255),  # White
                        'text': RGBColor(44, 62, 80)            # Dark Gray
                    }
                }
                
                self.current_theme = self.themes.get(theme, self.themes['modern'])
                self.presentation = Presentation()
                self.slide_layouts = self.presentation.slide_layouts
                
                # Content data
                self.content_data = []
                self.processed_text = ""
                self.slide_data = []
                
            def load_data_sources(self, data_source):
                """Load data from various sources"""
                sources_loaded = []
                
                # Load scraping data
                scraping_file = f"outputs/scraping/{self.task_id}/detailed_data.json"
                if os.path.exists(scraping_file):
                    try:
                        with open(scraping_file, 'r', encoding='utf-8') as f:
                            scraping_data = json.load(f)
                        
                        for page in scraping_data:
                            content = page.get('content', {})
                            self.processed_text += content.get('full_text', '') + "\n"
                            
                            # Extract structured content
                            self.content_data.append({
                                'type': 'web_page',
                                'title': page.get('title', ''),
                                'url': page.get('url', ''),
                                'headings': content.get('headings', []),
                                'paragraphs': content.get('paragraphs', []),
                                'lists': content.get('lists', []),
                                'tables': content.get('tables', [])
                            })
                        
                        sources_loaded.append('scraping')
                        print(f"Loaded scraping data: {len(scraping_data)} pages")
                    except Exception as e:
                        print(f"Error loading scraping data: {e}")
                
                # Load PDF processing data
                pdf_file = f"outputs/pdf-processing/{self.task_id}/processing_results.json"
                if os.path.exists(pdf_file):
                    try:
                        with open(pdf_file, 'r', encoding='utf-8') as f:
                            pdf_data = json.load(f)
                        
                        for doc in pdf_data.get('documents', []):
                            # Combine text from all extraction methods
                            text_content = ""
                            
                            # PyMuPDF text
                            for page in doc.get('pymupdf_extraction', []):
                                text_content += page.get('text', '') + "\n"
                            
                            # OCR text
                            for page in doc.get('ocr_extraction', []):
                                text_content += page.get('text', '') + "\n"
                            
                            self.processed_text += text_content
                            
                            # Extract structured content
                            self.content_data.append({
                                'type': 'pdf_document',
                                'filename': doc.get('filename', ''),
                                'text': text_content,
                                'pages': doc.get('analysis', {}).get('page_count', 0),
                                'tables': doc.get('structured_extraction', [])
                            })
                        
                        sources_loaded.append('pdf')
                        print(f"Loaded PDF data: {len(pdf_data.get('documents', []))} documents")
                    except Exception as e:
                        print(f"Error loading PDF data: {e}")
                
                return sources_loaded
            
            def analyze_content(self, max_slides=10):
                """Analyze content and create slide structure"""
                print(f"Analyzing content for {max_slides} slides...")
                
                # Basic content analysis
                words = self.processed_text.split()
                sentences = re.split(r'[.!?]+', self.processed_text)
                
                # Extract key topics (simple keyword extraction)
                word_freq = {}
                for word in words:
                    word_clean = re.sub(r'[^\w]', '', word.lower())
                    if len(word_clean) > 3:  # Skip short words
                        word_freq[word_clean] = word_freq.get(word_clean, 0) + 1
                
                # Get top keywords
                top_keywords = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:20]
                
                # Generate slide structure
                slides = []
                
                # Title slide
                slides.append({
                    'type': 'title',
                    'title': 'データ分析結果' if self.language == 'ja' else 'Data Analysis Results',
                    'subtitle': f'Task ID: {self.task_id}',
                    'content': []
                })
                
                # Overview slide
                slides.append({
                    'type': 'overview',
                    'title': '概要' if self.language == 'ja' else 'Overview',
                    'content': [
                        f"処理されたデータソース: {len(self.content_data)}" if self.language == 'ja' else f"Processed data sources: {len(self.content_data)}",
                        f"総文字数: {len(self.processed_text):,}" if self.language == 'ja' else f"Total characters: {len(self.processed_text):,}",
                        f"主要キーワード数: {len(top_keywords)}" if self.language == 'ja' else f"Key keywords: {len(top_keywords)}"
                    ]
                })
                
                # Key findings slides
                remaining_slides = max_slides - len(slides) - 1  # Reserve 1 for conclusion
                
                # Group content by type
                web_content = [item for item in self.content_data if item['type'] == 'web_page']
                pdf_content = [item for item in self.content_data if item['type'] == 'pdf_document']
                
                slides_per_type = remaining_slides // 2 if web_content and pdf_content else remaining_slides
                
                # Web content slides
                if web_content:
                    for i, content in enumerate(web_content[:slides_per_type]):
                        slides.append({
                            'type': 'content',
                            'title': content.get('title', f'Webページ {i+1}' if self.language == 'ja' else f'Web Page {i+1}'),
                            'content': [
                                f"URL: {content.get('url', '')}",
                                f"見出し数: {len(content.get('headings', []))}" if self.language == 'ja' else f"Headings: {len(content.get('headings', []))}",
                                f"段落数: {len(content.get('paragraphs', []))}" if self.language == 'ja' else f"Paragraphs: {len(content.get('paragraphs', []))}",
                            ] + content.get('headings', [])[:5]  # Show first 5 headings
                        })
                
                # PDF content slides
                if pdf_content:
                    for i, content in enumerate(pdf_content[:slides_per_type]):
                        slides.append({
                            'type': 'content',
                            'title': content.get('filename', f'PDF文書 {i+1}' if self.language == 'ja' else f'PDF Document {i+1}'),
                            'content': [
                                f"ページ数: {content.get('pages', 0)}" if self.language == 'ja' else f"Pages: {content.get('pages', 0)}",
                                f"文字数: {len(content.get('text', '')):,}" if self.language == 'ja' else f"Characters: {len(content.get('text', '')):,}",
                                "主要内容:" if self.language == 'ja' else "Main content:",
                            ] + content.get('text', '').split('\n')[:5]  # Show first 5 lines
                        })
                
                # Keywords slide
                if len(slides) < max_slides:
                    slides.append({
                        'type': 'chart',
                        'title': '主要キーワード' if self.language == 'ja' else 'Key Keywords',
                        'content': top_keywords[:10],
                        'chart_type': 'bar'
                    })
                
                # Conclusion slide
                slides.append({
                    'type': 'conclusion',
                    'title': 'まとめ' if self.language == 'ja' else 'Conclusion',
                    'content': [
                        f"分析完了: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
                        f"データソース: {len(self.content_data)}個",
                        f"生成スライド: {len(slides)}枚",
                        "詳細な分析結果は添付データをご確認ください。" if self.language == 'ja' else "Please refer to attached data for detailed analysis."
                    ]
                })
                
                self.slide_data = slides[:max_slides]
                return self.slide_data
            
            def create_chart(self, data, chart_type='bar', title='Chart'):
                """Create chart for slides"""
                plt.style.use('seaborn-v0_8')
                fig, ax = plt.subplots(figsize=(10, 6))
                
                if chart_type == 'bar' and isinstance(data, list):
                    # Keyword frequency chart
                    words = [item[0] for item in data[:10]]
                    counts = [item[1] for item in data[:10]]
                    
                    bars = ax.bar(words, counts, color='#2980b9', alpha=0.8)
                    ax.set_title(title, fontsize=16, fontweight='bold')
                    ax.set_xlabel('Keywords', fontsize=12)
                    ax.set_ylabel('Frequency', fontsize=12)
                    
                    # Rotate x-axis labels
                    plt.xticks(rotation=45, ha='right')
                    
                    # Add value labels on bars
                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width()/2., height,
                               f'{int(height)}', ha='center', va='bottom')
                
                plt.tight_layout()
                
                # Save chart
                chart_filename = f"chart_{len(os.listdir(os.path.join(self.output_dir, 'charts'))) + 1}.png"
                chart_path = os.path.join(self.output_dir, 'charts', chart_filename)
                plt.savefig(chart_path, dpi=300, bbox_inches='tight')
                plt.close()
                
                return chart_path
            
            def add_title_slide(self, slide_data):
                """Add title slide"""
                slide_layout = self.slide_layouts[0]  # Title slide layout
                slide = self.presentation.slides.add_slide(slide_layout)
                
                title = slide.shapes.title
                subtitle = slide.placeholders[1]
                
                title.text = slide_data['title']
                subtitle.text = slide_data['subtitle']
                
                # Style title
                title_font = title.text_frame.paragraphs[0].font
                title_font.size = Pt(44)
                title_font.color.rgb = self.current_theme['primary']
                title_font.bold = True
                
                # Style subtitle
                subtitle_font = subtitle.text_frame.paragraphs[0].font
                subtitle_font.size = Pt(24)
                subtitle_font.color.rgb = self.current_theme['secondary']
            
            def add_content_slide(self, slide_data):
                """Add content slide"""
                slide_layout = self.slide_layouts[1]  # Title and content layout
                slide = self.presentation.slides.add_slide(slide_layout)
                
                title = slide.shapes.title
                content = slide.placeholders[1]
                
                title.text = slide_data['title']
                
                # Add content
                text_frame = content.text_frame
                text_frame.clear()
                
                for item in slide_data['content']:
                    if item.strip():
                        p = text_frame.paragraphs[0] if len(text_frame.paragraphs) == 1 and not text_frame.paragraphs[0].text else text_frame.add_paragraph()
                        p.text = str(item)[:200] + "..." if len(str(item)) > 200 else str(item)  # Limit text length
                        p.font.size = Pt(18)
                        p.font.color.rgb = self.current_theme['text']
                
                # Style title
                title_font = title.text_frame.paragraphs[0].font
                title_font.size = Pt(32)
                title_font.color.rgb = self.current_theme['primary']
                title_font.bold = True
            
            def add_chart_slide(self, slide_data):
                """Add slide with chart"""
                slide_layout = self.slide_layouts[5]  # Title and content layout
                slide = self.presentation.slides.add_slide(slide_layout)
                
                title = slide.shapes.title
                title.text = slide_data['title']
                
                # Create and add chart
                chart_path = self.create_chart(
                    slide_data['content'], 
                    slide_data.get('chart_type', 'bar'),
                    slide_data['title']
                )
                
                # Add chart image to slide
                left = Inches(1)
                top = Inches(2)
                width = Inches(8)
                height = Inches(5)
                
                slide.shapes.add_picture(chart_path, left, top, width, height)
                
                # Style title
                title_font = title.text_frame.paragraphs[0].font
                title_font.size = Pt(32)
                title_font.color.rgb = self.current_theme['primary']
                title_font.bold = True
            
            def generate_presentation(self, max_slides=10):
                """Generate complete presentation"""
                print(f"Generating presentation with {max_slides} slides...")
                
                # Analyze content and create slide structure
                slides = self.analyze_content(max_slides)
                
                # Generate slides
                for slide_data in slides:
                    slide_type = slide_data['type']
                    
                    if slide_type == 'title':
                        self.add_title_slide(slide_data)
                    elif slide_type in ['overview', 'content', 'conclusion']:
                        self.add_content_slide(slide_data)
                    elif slide_type == 'chart':
                        self.add_chart_slide(slide_data)
                
                # Save presentation
                output_filename = f"presentation_{self.task_id}.pptx"
                output_path = os.path.join(self.output_dir, output_filename)
                self.presentation.save(output_path)
                
                # Generate summary
                summary = {
                    'task_id': self.task_id,
                    'presentation_file': output_filename,
                    'slide_count': len(slides),
                    'template_type': self.template_type,
                    'theme': self.theme,
                    'language': self.language,
                    'data_sources': len(self.content_data),
                    'total_text_length': len(self.processed_text),
                    'generation_time': datetime.now().isoformat()
                }
                
                # Save summary
                summary_file = os.path.join(self.output_dir, 'summary.json')
                with open(summary_file, 'w', encoding='utf-8') as f:
                    json.dump(summary, f, ensure_ascii=False, indent=2)
                
                return output_path, summary
        
        # Execute slide generation
        def main():
            generator = SlideGenerator(
                task_id="${{ inputs.task-id }}",
                template_type="${{ inputs.template-type }}",
                theme="${{ inputs.theme }}",
                language="${{ inputs.language }}"
            )
            
            # Load data sources
            sources = generator.load_data_sources("${{ inputs.data-source }}")
            
            if not sources and "${{ inputs.data-source }}" != 'manual':
                print("No data sources found, creating sample presentation...")
                generator.processed_text = "Sample content for presentation generation demonstration."
                generator.content_data = [
                    {
                        'type': 'sample',
                        'title': 'Sample Data',
                        'content': 'This is a sample presentation generated without input data.'
                    }
                ]
            
            # Generate presentation
            try:
                output_file, summary = generator.generate_presentation(int("${{ inputs.slide-count }}"))
                
                print(f"Slide generation completed successfully!")
                print(f"Output file: {output_file}")
                print(f"Summary: {json.dumps(summary, indent=2)}")
                
                # Set GitHub Action outputs
                gh_out = os.getenv('GITHUB_OUTPUT')
                if gh_out:
                    with open(gh_out, 'a') as f:
                        f.write('status=success\n')
                        f.write(f'output_file={output_file}\n')
                        f.write(f'slide_summary={json.dumps(summary)}\n')
                
            except Exception as e:
                print(f"Slide generation failed: {e}")
                gh_out = os.getenv('GITHUB_OUTPUT')
                if gh_out:
                    with open(gh_out, 'a') as f:
                        f.write('status=failed\n')
        
        if __name__ == "__main__":
            main()
        EOF
        
        python slide_generator.py

    - name: 📊 Generate Slide Report
      run: |
        echo "## 🎨 Slide Generation Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Task ID**: ${{ inputs.task-id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Data Source**: ${{ inputs.data-source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Template**: ${{ inputs.template-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Theme**: ${{ inputs.theme }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Language**: ${{ inputs.language }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.slide-generation.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "outputs/slides/${{ inputs.task-id }}/summary.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generation Results:" >> $GITHUB_STEP_SUMMARY
          cat outputs/slides/${{ inputs.task-id }}/summary.json | jq -r '
            "- **Slide Count**: " + (.slide_count | tostring) + "\n" +
            "- **Data Sources**: " + (.data_sources | tostring) + "\n" +
            "- **Text Length**: " + (.total_text_length | tostring) + " characters\n" +
            "- **Generation Time**: " + .generation_time
          ' >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload Slide Generation Results
      uses: actions/upload-artifact@v4
      if: steps.slide-generation.outputs.status == 'success'
      with:
        name: slide-generation-results-${{ inputs.task-id }}
        path: outputs/slides/${{ inputs.task-id }}/
        retention-days: 30