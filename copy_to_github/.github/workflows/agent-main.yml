name: 🤖 AI Agent Main Controller

on:
  # Issues-based task triggering
  issues:
    types: [opened, edited, labeled]
  
  # Pull request-based task triggering
  pull_request:
    types: [opened, edited, labeled]
  
  # Repository dispatch for external triggers
  repository_dispatch:
    types: [agent-task, scrape-request, pdf-process, slide-generate]
  
  # Schedule for periodic tasks
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Task Type'
        required: true
        default: 'status'
        type: choice
        options:
        - status
        - scraping
        - pdf-ocr
        - slide-generation
        - data-processing
        - full-pipeline
      target_url:
        description: 'Target URL (for scraping)'
        required: false
        type: string
      output_format:
        description: 'Output Format'
        required: false
        default: 'json'
        type: choice
        options:
        - json
        - csv
        - pdf
        - pptx
        - markdown
      parameters:
        description: 'Additional Parameters (JSON)'
        required: false
        type: string
        default: '{}'

env:
  AGENT_VERSION: "2.0.0"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  agent-orchestrator:
    name: 🎯 Agent Task Orchestrator
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    outputs:
      task-id: ${{ steps.generate-task-id.outputs.task_id }}
      task-type: ${{ steps.parse-task.outputs.task_type }}
      should-proceed: ${{ steps.parse-task.outputs.should_proceed }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🆔 Generate Task ID
      id: generate-task-id
      run: |
        TASK_ID="task-$(date +%Y%m%d-%H%M%S)-$(echo $RANDOM | md5sum | head -c 8)"
        echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT
        echo "Generated Task ID: $TASK_ID"

    - name: 🔍 Parse Task Request
      id: parse-task
      run: |
        echo "Parsing task request..."
        
        # Initialize variables
        TASK_TYPE="status"
        SHOULD_PROCEED="false"
        
        # Check trigger source
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TASK_TYPE="${{ github.event.inputs.task_type }}"
          SHOULD_PROCEED="true"
          echo "Manual trigger detected: $TASK_TYPE"
          
        elif [ "${{ github.event_name }}" = "issues" ]; then
          # Parse issue title and body for tasks
          ISSUE_TITLE="${{ github.event.issue.title }}"
          echo "Issue trigger: $ISSUE_TITLE"
          
          if [[ "$ISSUE_TITLE" == *"[SCRAPE]"* ]]; then
            TASK_TYPE="scraping"
            SHOULD_PROCEED="true"
          elif [[ "$ISSUE_TITLE" == *"[PDF]"* ]]; then
            TASK_TYPE="pdf-ocr"
            SHOULD_PROCEED="true"
          elif [[ "$ISSUE_TITLE" == *"[SLIDE]"* ]]; then
            TASK_TYPE="slide-generation"
            SHOULD_PROCEED="true"
          elif [[ "$ISSUE_TITLE" == *"[AGENT]"* ]]; then
            TASK_TYPE="full-pipeline"
            SHOULD_PROCEED="true"
          fi
          
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          TASK_TYPE="${{ github.event.client_payload.task_type }}"
          SHOULD_PROCEED="true"
          echo "Repository dispatch: $TASK_TYPE"
          
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          TASK_TYPE="status"
          SHOULD_PROCEED="true"
          echo "Scheduled maintenance task"
        fi
        
        echo "task_type=$TASK_TYPE" >> $GITHUB_OUTPUT
        echo "should_proceed=$SHOULD_PROCEED" >> $GITHUB_OUTPUT
        echo "Final Task Type: $TASK_TYPE, Proceed: $SHOULD_PROCEED"

    - name: 🚀 Setup Agent Environment
      if: steps.parse-task.outputs.should_proceed == 'true'
      run: |
        echo "Setting up agent environment..."
        
        # Create agent workspace
        mkdir -p /tmp/agent-workspace
        cd /tmp/agent-workspace
        
        # Setup Python environment
        python3 -m pip install --upgrade pip
        
        # Install core dependencies
        pip install requests beautifulsoup4 selenium pandas numpy
        pip install PyPDF2 pdf2image pytesseract pillow
        pip install python-pptx jinja2 markdown
        pip install asyncio aiohttp lxml cssselect
        
        # Install additional tools based on task type
        TASK_TYPE="${{ steps.parse-task.outputs.task_type }}"
        
        if [[ "$TASK_TYPE" == "scraping" || "$TASK_TYPE" == "full-pipeline" ]]; then
          pip install scrapy playwright
          playwright install chromium
        fi
        
        if [[ "$TASK_TYPE" == "pdf-ocr" || "$TASK_TYPE" == "full-pipeline" ]]; then
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-jpn poppler-utils
        fi
        
        if [[ "$TASK_TYPE" == "slide-generation" || "$TASK_TYPE" == "full-pipeline" ]]; then
          pip install reportlab matplotlib seaborn plotly
        fi
        
        echo "Agent environment setup completed"

    - name: 📊 Agent Status Report
      run: |
        echo "## 🤖 Agent Status Report - $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Task ID**: ${{ steps.generate-task-id.outputs.task_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Task Type**: ${{ steps.parse-task.outputs.task_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent Version**: ${{ env.AGENT_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Active and Ready" >> $GITHUB_STEP_SUMMARY

  execute-scraping-task:
    name: 🕷️ Execute Scraping Task
    needs: agent-orchestrator
    if: needs.agent-orchestrator.outputs.should-proceed == 'true' && (needs.agent-orchestrator.outputs.task-type == 'scraping' || needs.agent-orchestrator.outputs.task-type == 'full-pipeline')
    uses: ./.github/workflows/task-scraping.yml
    with:
      task-id: ${{ needs.agent-orchestrator.outputs.task-id }}
      target-url: ${{ github.event.inputs.target_url || github.event.issue.body || 'https://example.com' }}
    secrets: inherit

  execute-pdf-ocr-task:
    name: 📄 Execute PDF/OCR Task
    needs: [agent-orchestrator, execute-scraping-task]
    if: always() && needs.agent-orchestrator.outputs.should-proceed == 'true' && (needs.agent-orchestrator.outputs.task-type == 'pdf-ocr' || needs.agent-orchestrator.outputs.task-type == 'full-pipeline')
    uses: ./.github/workflows/task-pdf-ocr.yml
    with:
      task-id: ${{ needs.agent-orchestrator.outputs.task-id }}
      input-source: ${{ needs.execute-scraping-task.result || 'manual' }}
    secrets: inherit

  execute-slide-generation-task:
    name: 🎨 Execute Slide Generation Task
    needs: [agent-orchestrator, execute-pdf-ocr-task]
    if: always() && needs.agent-orchestrator.outputs.should-proceed == 'true' && (needs.agent-orchestrator.outputs.task-type == 'slide-generation' || needs.agent-orchestrator.outputs.task-type == 'full-pipeline')
    uses: ./.github/workflows/task-slide-gen.yml
    with:
      task-id: ${{ needs.agent-orchestrator.outputs.task-id }}
      data-source: ${{ needs.execute-pdf-ocr-task.result || 'manual' }}
    secrets: inherit

  finalize-task:
    name: 🎯 Finalize Task
    needs: [agent-orchestrator, execute-scraping-task, execute-pdf-ocr-task, execute-slide-generation-task]
    if: always() && needs.agent-orchestrator.outputs.should-proceed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 📝 Generate Final Report
      run: |
        echo "## 🎯 Task Execution Report" >> $GITHUB_STEP_SUMMARY
        echo "**Task ID**: ${{ needs.agent-orchestrator.outputs.task-id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Completed**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results Summary:" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.execute-scraping-task.result }}" == "success" ]]; then
          echo "✅ Scraping: Completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.execute-scraping-task.result }}" == "failure" ]]; then
          echo "❌ Scraping: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ Scraping: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.execute-pdf-ocr-task.result }}" == "success" ]]; then
          echo "✅ PDF/OCR: Completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.execute-pdf-ocr-task.result }}" == "failure" ]]; then
          echo "❌ PDF/OCR: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ PDF/OCR: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.execute-slide-generation-task.result }}" == "success" ]]; then
          echo "✅ Slide Generation: Completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.execute-slide-generation-task.result }}" == "failure" ]]; then
          echo "❌ Slide Generation: Failed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ Slide Generation: Skipped" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: agent-results-${{ needs.agent-orchestrator.outputs.task-id }}
        path: outputs/
        retention-days: 30